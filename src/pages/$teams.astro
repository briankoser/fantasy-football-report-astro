---
import TeamLayout from '../layouts/TeamLayout.astro'
import stats from '../data/2020/stats.js';
console.log(Array.from(stats.weeks).map(week => [week[1][0].away, week[1][0].home].find(team => team.teamId === 2)));
export async function createCollection() {
    return {
        route: `/teams/:slug`,
        paths() {
            return stats.teams.map(team => ({ params: { 
                abbrev: team.abbrev, 
                id: team.id, 
                ownerId: team.owner.id,
                slug: team.slug,
                teamName: team.teamName
            }}));
        },
        async props({ params }) {
            let games = Array.from(stats.weeks).map(week => [week[1][0].away, week[1][0].home].find(team => team.teamId === params.id));
            let team = stats.teams.find(t => t.id === params.id);

            return {
                games,
                team
            };
        }
    };
}

const { games, team } = Astro.props;
---
<TeamLayout title="Team Report", teamSlug={team.slug}, teamName={team.teamName}>
  <h3>Season</h3>
  <table class="table">
    <thead>
      <th>Owner</th>
      <th>Draft Order</th>
      <!-- <th>Highest Total</th>
      <th>Lowest Total</th>
      <th>Perfect Starts</th>
      <th>Regular Season Points</th>
      <th>Playoffs Points</th>
      <th>Highest MVP Points</th>
      <th>Highest MVP Player</th>
      <th>Lowest MVP Points</th>
      <th>Lowest MVP Player</th>
      <th>Highest LVP Points</th>
      <th>Highest LVP Player</th>
      <th>Lowest LVP Points</th>
      <th>Lowest LVP Player</th>
      <th>Season MVP Points</th>
      <th>Season MVP Player</th> -->
    </thead>
    <tbody>
        <tr>
            <td>{team.owner.displayName}</td>
            <td>{team.draftOrder}</td>
        </tr>
    </tbody>
  </table>

  <h3>Weekly</h3>
  <table class="table table-striped table-hover">
    <thead>
        <th>Week</th>
        <th>QB</th>
        <th>RB</th>
        <th>WR</th>
        <th>TE</th>
        <th>Flex</th>
        <th>D/ST</th>
        <th>K</th>
        <th>Projected</th>
        <th>Actual</th>
        <!-- <th>Additional Points Possible</th> -->
        <!-- <th>Total Possible</th> -->
        <th>MVP</th>
        <th>LVP</th>
        <th>Bench</th>
        <th>Bench MVP</th>
    </thead>
    <tbody>
        {games.map((game) => (
        <tr>
            <td class="number">{game?.week}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "qb")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "rb")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "wr")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "te")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "flex")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "def")?.points}</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "k")?.points}</td>
            <td class="number">{game?.projectedPoints?.toFixed(2)}</td>
            <td class="number">{game?.game?.totalPoints}</td>
            <td>{game?.mvpNames} ({game?.mvpPoints?.toFixed(2)})</td>
            <td>{game?.lvpNames} ({game?.lvpPoints?.toFixed(2)})</td>
            <td class="number">{game?.positionPoints?.find(p => p.position === "bench")?.points}</td>
            <td>{game?.benchMvpNames} ({game?.benchMvpPoints?.toFixed(2)})</td>
        </tr>
        ))}
        <!-- <tr>
            <td class="number">{game.week}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "qb").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "rb").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "wr").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "te").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "flex").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "def").points}</td>
            <td class="number">{game.positionPoints.find(p => p.position === "k").points}</td>
            <td class="number">{game.projectedPoints.toFixed(2)}</td>
            <td class="number">{game.game.totalPoints}</td>
            <td>{game.mvpNames} ({game.mvpPoints.toFixed(2)})</td>
            <td>{game.lvpNames} ({game.lvpPoints.toFixed(2)})</td>
            <td class="number">{game.positionPoints.find(p => p.position === "bench").points}</td>
            <td>{game.benchMvpNames} ({game.benchMvpPoints.toFixed(2)})</td>
        </tr> -->

        <!-- <td>Additional Points Possible</td> -->
        <!-- <td>Total Possible</td> -->
    </tbody>
  </table>
</TeamLayout>