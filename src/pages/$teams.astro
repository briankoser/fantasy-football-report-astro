---
import BaseLayout from '../layouts/BaseLayout.astro'

export async function createCollection() {
    const espnImport = await import('../data/2020/espn.json');
    const draftImport = await import('../data/2020/draft.json');
    const teamsImport = await import('../data/2020/raw/teams.json');
    const week1Import = await import('../data/2020/raw/weeks/week1.json');
    
    const weektest = await import('../data/2020/week.js');
    console.log(weektest);

    const espn = espnImport.default;
    const draft = draftImport.default;
    const teams = teamsImport.default[0];
    const week1 = week1Import.default;

    const week = 1;
    const weekGames = week1.schedule.filter(s => s.matchupPeriodId === week);

    return {
        route: `/teams/:slug`,
        paths() {
            return teams.teams.map(team => ({ params: { 
                abbrev: team.abbrev, 
                id: team.id, 
                ownerId: team.owners[0],
                slug: team.abbrev.toLowerCase(),
                teamName: `${team.location} ${team.nickname}`
            }}));
        },
        async props({ params }) {
            let game = [...weekGames.map(w => w.home), ...weekGames.map(w => w.away)].find(w => w.teamId === params.id);
            
            let positionPoints = Object.keys(espn.lineupSlots).map(p => { 
                let players = game.rosterForCurrentScoringPeriod.entries.filter(e => e.lineupSlotId === espn.lineupSlots[p]);
                let points = players.reduce( (acc, cur) => acc += cur.playerPoolEntry.appliedStatTotal, 0);
                
                return {
                    "position": p, 
                    "points": points.toFixed(2)
                };
            });
            
            let starters = game.rosterForCurrentScoringPeriod.entries.filter(e => e.lineupSlotId !== espn.lineupSlots.bench);
            let projected = starters.map(e => e.playerPoolEntry.player.stats.find(s => s.proTeamId === 0));
            let projectedPoints = projected.reduce( (acc, cur) => acc += cur.appliedTotal, 0);
            let mvpPoints = Math.max.apply(this, starters.map(s => s.playerPoolEntry.appliedStatTotal));
            let mvps = starters.filter(s => s.playerPoolEntry.appliedStatTotal === mvpPoints);
            let mvpNames = mvps.map(m => m.playerPoolEntry.player.fullName).join(", ");
            let lvpPoints = Math.min.apply(this, starters.map(s => s.playerPoolEntry.appliedStatTotal));
            let lvps = starters.filter(s => s.playerPoolEntry.appliedStatTotal === lvpPoints);
            let lvpNames = lvps.map(m => m.playerPoolEntry.player.fullName).join(", ");
            let bench = game.rosterForCurrentScoringPeriod.entries.filter(e => e.lineupSlotId === espn.lineupSlots.bench);
            let benchMvpPoints = Math.max.apply(this, bench.map(s => s.playerPoolEntry.appliedStatTotal));
            let benchMvps = bench.filter(s => s.playerPoolEntry.appliedStatTotal === benchMvpPoints);
            let benchMvpNames = benchMvps.map(m => m.playerPoolEntry.player.fullName).join(", ");

            return {
                team: {
                    benchMvpNames,
                    benchMvpPoints,
                    draftOrder: draft.teams.find(t => t.id === params.id).draftOrder,
                    game,
                    owner: teams.members.find(m => m.id === params.ownerId),
                    lvpNames,
                    lvpPoints,
                    mvpNames,
                    mvpPoints,
                    positionPoints,
                    projectedPoints,
                    teamName: params.teamName,
                    week
                }
            };
        }
    };
}

const { team } = Astro.props;
---
<BaseLayout title="Team Report">
  <h2>{team.teamName}</h2>

  <h3>Season</h3>
  <table>
    <thead>
      <th>Owner</th>
      <th>Draft Order</th>
      <!-- <th>Highest Total</th>
      <th>Lowest Total</th>
      <th>Perfect Starts</th>
      <th>Regular Season Points</th>
      <th>Playoffs Points</th>
      <th>Highest MVP Points</th>
      <th>Highest MVP Player</th>
      <th>Lowest MVP Points</th>
      <th>Lowest MVP Player</th>
      <th>Highest LVP Points</th>
      <th>Highest LVP Player</th>
      <th>Lowest LVP Points</th>
      <th>Lowest LVP Player</th>
      <th>Season MVP Points</th>
      <th>Season MVP Player</th> -->
    </thead>
    <tbody>
        <tr>
            <td>{team.owner.displayName}</td>
            <td>{team.draftOrder}</td>
        </tr>
    </tbody>
  </table>

  <h3>Weekly</h3>
  <table>
    <thead>
        <th>Week</th>
        <th>QB</th>
        <th>RB</th>
        <th>WR</th>
        <th>TE</th>
        <th>Flex</th>
        <th>D/ST</th>
        <th>K</th>
        <th>Actual</th>
        <th>Bench</th>
        <!-- <th>Additional Points Possible</th> -->
        <!-- <th>Total Possible</th> -->
        <th>Projected Points</th>
        <th>Most Valuable Player</th>
        <th>Least Valuable Player</th>
        <th>Bench MVP</th>
    </thead>
    <tbody>
        <td>{team.week}</td>
        <td>{team.positionPoints.find(p => p.position === "qb").points}</td>
        <td>{team.positionPoints.find(p => p.position === "rb").points}</td>
        <td>{team.positionPoints.find(p => p.position === "wr").points}</td>
        <td>{team.positionPoints.find(p => p.position === "te").points}</td>
        <td>{team.positionPoints.find(p => p.position === "flex").points}</td>
        <td>{team.positionPoints.find(p => p.position === "def").points}</td>
        <td>{team.positionPoints.find(p => p.position === "k").points}</td>
        <td>{team.game.totalPoints}</td>
        <td>{team.positionPoints.find(p => p.position === "bench").points}</td>
        <!-- <td>Additional Points Possible</td> -->
        <!-- <td>Total Possible</td> -->
        <td>{team.projectedPoints.toFixed(2)}</td>
        <td>{team.mvpNames} ({team.mvpPoints.toFixed(2)})</td>
        <td>{team.lvpNames} ({team.lvpPoints.toFixed(2)})</td>
        <td>{team.benchMvpNames} ({team.benchMvpPoints.toFixed(2)})</td>
    </tbody>
  </table>
</BaseLayout>