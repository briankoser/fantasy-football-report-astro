---
import BaseLayout from '../../layouts/BaseLayout.astro'
import espn from '../../data/espn.json';

import teams from '../../data/2020/teams.json';
let teamId = 1;
let team = teams[0].teams.find(t => t.id === teamId);
let ownerId = team.owners[0];
let owner = teams[0].members.find(m => m.id === ownerId);

import week1 from '../../data/2020/week1.json';
let week = 1;
let weekGames = week1.schedule.filter(s => s.matchupPeriodId === week);
let game = [...weekGames.map(w => w.home), ...weekGames.map(w => w.away)].find(w => w.teamId === teamId);
let starters = game.rosterForCurrentScoringPeriod.entries
    .filter(e => e.lineupSlotId !== espn.lineupSlots.bench);
let projected = starters.map(e => e.playerPoolEntry.player.stats.find(s => s.proTeamId === 0));
let projectedPoints = projected.reduce( (acc, cur) => acc += cur.appliedTotal, 0);
let mvpPoints = Math.max.apply(this, starters.map(s => s.playerPoolEntry.appliedStatTotal));
let mvps = starters.filter(s => s.playerPoolEntry.appliedStatTotal === mvpPoints);
let mvpNames = mvps.map(m => m.playerPoolEntry.player.fullName).join(", ");
let lvpPoints = Math.min.apply(this, starters.map(s => s.playerPoolEntry.appliedStatTotal));
let lvps = starters.filter(s => s.playerPoolEntry.appliedStatTotal === lvpPoints);
let lvpNames = lvps.map(m => m.playerPoolEntry.player.fullName).join(", ");
let bench = game.rosterForCurrentScoringPeriod.entries
    .filter(e => e.lineupSlotId === espn.lineupSlots.bench);
let benchMvpPoints = Math.max.apply(this, bench.map(s => s.playerPoolEntry.appliedStatTotal));
let benchMvps = bench.filter(s => s.playerPoolEntry.appliedStatTotal === benchMvpPoints);
let benchMvpNames = benchMvps.map(m => m.playerPoolEntry.player.fullName).join(", ");

let getPositionPoints = (name) => {
  let players = game.rosterForCurrentScoringPeriod.entries
    .filter(e => e.lineupSlotId === espn.lineupSlots[name]);
  let points = players.reduce( (acc, cur) => acc += cur.playerPoolEntry.appliedStatTotal, 0);
  return points.toFixed(2);
}

import draft from '../../data/2020/draft.json';
let draftOrder = draft.teams.find(t => t.id === teamId).draftOrder;

function teamName(team) {
  return `${team.location} ${team.nickname}`;
}
---
<BaseLayout title="Team Report">
  <h2>{teamName(team)}</h2>

  <h3>Season</h3>
  <table>
    <thead>
      <th>Owner</th>
      <th>Draft Order</th>
      <!-- <th>Highest Total</th>
      <th>Lowest Total</th>
      <th>Perfect Starts</th>
      <th>Regular Season Points</th>
      <th>Playoffs Points</th>
      <th>Highest MVP Points</th>
      <th>Highest MVP Player</th>
      <th>Lowest MVP Points</th>
      <th>Lowest MVP Player</th>
      <th>Highest LVP Points</th>
      <th>Highest LVP Player</th>
      <th>Lowest LVP Points</th>
      <th>Lowest LVP Player</th>
      <th>Season MVP Points</th>
      <th>Season MVP Player</th> -->
    </thead>
    <tbody>
        <tr>
            <td>{owner.displayName}</td>
            <td>{draftOrder}</td>
        </tr>
    </tbody>
  </table>

  <h3>Weekly</h3>
  <table>
    <thead>
        <th>Week</th>
        <th>QB</th>
        <th>RB</th>
        <th>WR</th>
        <th>TE</th>
        <th>Flex</th>
        <th>D/ST</th>
        <th>K</th>
        <th>Actual</th>
        <th>Bench</th>
        <!-- <th>Additional Points Possible</th> -->
        <!-- <th>Total Possible</th> -->
        <th>Projected Points</th>
        <th>Most Valuable Player</th>
        <th>Least Valuable Player</th>
        <th>Bench MVP</th>
    </thead>
    <tbody>
        <td>{week}</td>
        <td>{getPositionPoints("qb")}</td>
        <td>{getPositionPoints("rb")}</td>
        <td>{getPositionPoints("wr")}</td>
        <td>{getPositionPoints("te")}</td>
        <td>{getPositionPoints("flex")}</td>
        <td>{getPositionPoints("def")}</td>
        <td>{getPositionPoints("k")}</td>
        <td>{game.totalPoints}</td>
        <td>{getPositionPoints("bench")}</td>
        <!-- <td>Additional Points Possible</td> -->
        <!-- <td>Total Possible</td> -->
        <td>{projectedPoints.toFixed(2)}</td>
        <td>{mvpNames} ({mvpPoints.toFixed(2)})</td>
        <td>{lvpNames} ({lvpPoints.toFixed(2)})</td>
        <td>{benchMvpNames} ({benchMvpPoints.toFixed(2)})</td>
    </tbody>
  </table>
</BaseLayout>
